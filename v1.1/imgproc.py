#############################################
# Image Processing version 1.1
# Author : Putu Bayu Baskara - 1808561022
# @2021
#############################################
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'imgproc.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from cv2 import cv2
import imutils
import numpy as np


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(551, 750)
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(20, 40, 511, 511))
        self.label.setFrameShape(QtWidgets.QFrame.Box)
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap(
            "../imgprocessing/sourcecode/lena.png"))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(20, 10, 81, 16))
        self.label_2.setObjectName("label_2")
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setGeometry(QtCore.QRect(170, 570, 101, 31))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(Dialog)
        self.pushButton_2.setGeometry(QtCore.QRect(300, 570, 101, 31))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(Dialog)
        self.pushButton_3.setGeometry(QtCore.QRect(20, 640, 101, 31))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(Dialog)
        self.pushButton_4.setGeometry(QtCore.QRect(130, 640, 101, 31))
        self.pushButton_4.setObjectName("pushButton_4")
        self.horizontalSlider = QtWidgets.QSlider(Dialog)
        self.horizontalSlider.setGeometry(QtCore.QRect(90, 680, 441, 22))
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.pushButton_5 = QtWidgets.QPushButton(Dialog)
        self.pushButton_5.setGeometry(QtCore.QRect(240, 640, 101, 31))
        self.pushButton_5.setObjectName("pushButton_5")
        self.label_5 = QtWidgets.QLabel(Dialog)
        self.label_5.setGeometry(QtCore.QRect(20, 680, 51, 16))
        self.label_5.setObjectName("label_5")
        self.horizontalSlider_2 = QtWidgets.QSlider(Dialog)
        self.horizontalSlider_2.setGeometry(QtCore.QRect(90, 710, 441, 22))
        self.horizontalSlider_2.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_2.setObjectName("horizontalSlider_2")
        self.label_6 = QtWidgets.QLabel(Dialog)
        self.label_6.setGeometry(QtCore.QRect(20, 710, 51, 16))
        self.label_6.setObjectName("label_6")
        self.pushButton_6 = QtWidgets.QPushButton(Dialog)
        self.pushButton_6.setGeometry(QtCore.QRect(350, 640, 91, 31))
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_7 = QtWidgets.QPushButton(Dialog)
        self.pushButton_7.setGeometry(QtCore.QRect(450, 640, 81, 31))
        self.pushButton_7.setObjectName("pushButton_7")
        self.label_7 = QtWidgets.QLabel(Dialog)
        self.label_7.setGeometry(QtCore.QRect(20, 610, 111, 16))
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(Dialog)
        self.label_8.setGeometry(QtCore.QRect(10, 630, 531, 111))
        self.label_8.setFrameShape(QtWidgets.QFrame.Panel)
        self.label_8.setText("")
        self.label_8.setObjectName("label_8")
        self.label_8.raise_()
        self.label.raise_()
        self.label_2.raise_()
        self.pushButton.raise_()
        self.pushButton_2.raise_()
        self.pushButton_3.raise_()
        self.pushButton_4.raise_()
        self.horizontalSlider.raise_()
        self.pushButton_5.raise_()
        self.label_5.raise_()
        self.horizontalSlider_2.raise_()
        self.label_6.raise_()
        self.pushButton_6.raise_()
        self.pushButton_7.raise_()
        self.label_7.raise_()

        self.retranslateUi(Dialog)
        self.pushButton.clicked.connect(self.loadImage)
        self.pushButton_2.clicked.connect(self.savePhoto)
        self.pushButton_3.clicked.connect(self.convGrayscale)
        self.pushButton_4.clicked.connect(self.convBnW)
        self.pushButton_5.clicked.connect(self.threshold)
        self.pushButton_6.clicked.connect(self.rotate)
        self.pushButton_7.clicked.connect(self.flip)
        self.horizontalSlider.valueChanged['int'].connect(
            self.brightness_value)
        self.horizontalSlider_2.valueChanged['int'].connect(
            self.contrast_value)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        # init var
        self.filename = None
        self.tmp = None
        self.brightness_value_now = 0
        self.contrast_value_now = 0
        self._submit_counter = 0

    def loadImage(self):
        self.filename = QtWidgets.QFileDialog.getOpenFileName(
            filter="Image (*.*)")[0]
        self.image = cv2.imread(self.filename)
        self.setPhoto(self.image)

    def setPhoto(self, image):
        self.tmp = image
        frame = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image = QtGui.QImage(
            frame, frame.shape[1], frame.shape[0], frame.strides[0], QtGui.QImage.Format_RGB888)
        self.label.setPixmap(QtGui.QPixmap.fromImage(image))

    def convGrayscale(self, image):
        # grayscale = 0.333R + 0.333G + 0.333B (1)
        # grayscale = 0.299R + 0.587G + 0.114B (2)
        H, W = self.image.shape[:2]
        gray = np.zeros((H, W), np.uint8)
        for i in range(H):
            for j in range(W):
                gray[i, j] = np.clip(0.299 * self.image[i, j, 0] + 0.587
                                     * self.image[i, j, 1] + 0.114 * self.image[i, j, 2], 0, 255)
        self.filename = "RGB2GRAY.jpg"
        self.setPhoto(gray)

    def convBnW(self, image):
        img = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
        thresh = 128
        h, w = img.shape[:2]
        for i in np.arange(h):
            for j in np.arange(w):
                a = img.item(i, j)
                if a > thresh:
                    a = 255
                elif a < thresh:
                    a = 0
                else:
                    a = a
                img.itemset((i, j), a)
        self.filename = "RGB2BNW.jpg"
        self.setPhoto(img)

    def threshold(self, image):
        thresh = 128
        img = cv2.threshold(self.image, thresh, 255, cv2.THRESH_BINARY)[1]
        self.filename = "threshold.jpg"
        self.setPhoto(img)

    def rotate(self, image):
        img = self.image
        h, w = img.shape[:2]
        # calculate the center of the image
        center = (w / 2, h / 2)

        angle_45 = -45
        angle_90 = -90
        angle_135 = -135
        angle540 = 540
        angle135 = 135
        angle_270 = -270
        angle45 = 45
        angle360 = 360

        scale = 1.0

        # perform the counterclockwise rotation holding at the center
        self._submit_counter += 1
        if (self._submit_counter == 1):
            M = cv2.getRotationMatrix2D(center, angle_45, scale)
            rotated45 = cv2.warpAffine(img, M, (h, w))
            img = rotated45
        elif (self._submit_counter == 2):
            M = cv2.getRotationMatrix2D(center, angle_90, scale)
            rotated_90 = cv2.warpAffine(img, M, (w, h))
            img = rotated_90
        elif (self._submit_counter == 3):
            M = cv2.getRotationMatrix2D(center, angle_135, scale)
            rotated_135 = cv2.warpAffine(img, M, (h, w))
            img = rotated_135
        elif (self._submit_counter == 4):
            M = cv2.getRotationMatrix2D(center, angle540, scale)
            rotated540 = cv2.warpAffine(img, M, (h, w))
            img = rotated540
        elif (self._submit_counter == 5):
            M = cv2.getRotationMatrix2D(center, angle135, scale)
            rotated135 = cv2.warpAffine(img, M, (h, w))
            img = rotated135
        elif (self._submit_counter == 6):
            M = cv2.getRotationMatrix2D(center, angle_270, scale)
            rotated_270 = cv2.warpAffine(img, M, (h, w))
            img = rotated_270
        elif (self._submit_counter == 7):
            M = cv2.getRotationMatrix2D(center, angle45, scale)
            rotated45 = cv2.warpAffine(img, M, (h, w))
            img = rotated45
        elif (self._submit_counter == 8):
            M = cv2.getRotationMatrix2D(center, angle360, scale)
            rotated360 = cv2.warpAffine(img, M, (h, w))
            img = rotated360
        else:
            self._submit_counter = 0
            return self._submit_counter
        self.filename = "rotate.jpg"
        self.setPhoto(img)

    def flip(self, image):
        self._submit_counter += 1
        if (self._submit_counter == 1):
            img = cv2.flip(self.image, 0)
        elif (self._submit_counter == 2):
            img = cv2.flip(self.image, 1)
        elif (self._submit_counter == 3):
            img = cv2.flip(self.image, -1)
        else:
            self._submit_counter = 0
            return self._submit_counter
        self.filename = "flip.jpg"
        self.setPhoto(img)

    def brightness_value(self, value):
        self.brightness_value_now = value
        print('Brightness :', value)
        self.filename = "brightness.jpg"
        self.update()

    def contrast_value(self, value):
        self.contrast_value_now = value
        print('Contrast :', value)
        self.filename = "contrast.jpg"
        self.update()

    def changeBrightness(self, img, value):
        hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
        h, s, v = cv2.split(hsv)
        lim = 255-value
        v[v > lim] = 255
        v[v <= lim] += value
        final_hsv = cv2.merge((h, s, v))
        img2 = cv2.cvtColor(final_hsv, cv2.COLOR_HSV2BGR)
        return img2

    def changeContrast(self, img, value):
        f = 131*(value + 127)/(127*(131-value))
        alpha_c = f
        gamma_c = 127*(1-f)

        img = cv2.addWeighted(img, alpha_c, img, 0, gamma_c)
        return img

    def update(self):
        img = self.changeBrightness(self.image, self.brightness_value_now)
        img = self.changeContrast(img, self.contrast_value_now)
        self.setPhoto(img)

    def savePhoto(self):
        cv2.imwrite(self.filename, self.tmp)
        print('Image Saved as', self.filename)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Image Processing v1.1"))
        self.label_2.setText(_translate("Dialog", "Imported Image "))
        self.pushButton.setText(_translate("Dialog", "Load Image"))
        self.pushButton_2.setText(_translate("Dialog", "Save Image"))
        self.pushButton_3.setText(_translate("Dialog", "RGB to Grayscale"))
        self.pushButton_4.setText(_translate("Dialog", "RGB to BnW"))
        self.pushButton_5.setText(_translate("Dialog", "Thresholding"))
        self.label_5.setText(_translate("Dialog", "Brightness"))
        self.label_6.setText(_translate("Dialog", "Contrast"))
        self.pushButton_6.setText(_translate("Dialog", "Rotate Image"))
        self.pushButton_7.setText(_translate("Dialog", "Flip Image"))
        self.label_7.setText(_translate("Dialog", "Image Processing Tools"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
